<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bruno57.Domain.Factory.Abstractions</name>
    </assembly>
    <members>
        <member name="M:Bruno57.Domain.Factory.Abstractions.ActionOptions.DomainFactoryOption.IgnoreProperties(System.Collections.Immutable.IImmutableList{System.String})">
            <summary>
            Properties that are not supposed to be passed to the factory for the creation of the domain entity.
            <para>
            Often, commands are sent with all properties to satisfy the business logic.
            However, not all of them are needed to create a new domain entity object.
            </para>
            <para>
            The property will not be ignored if it is expected by the entity constructor. 
            If you do this, an error message will be returned.
            </para>
            </summary>
            <param name="propertyNames">A list of property names to be ignored by the factory.</param>
        </member>
        <member name="M:Bruno57.Domain.Factory.Abstractions.ActionOptions.DomainFactoryOption.AddProperties(System.Collections.Immutable.IImmutableDictionary{System.String,System.Object})">
            <summary>
            <para>
            Properties that are not sent via the request command and are calculated after the request was sent by clients.
            </para>
            <para>
            To keep the API requests clean from unnecessary constraints to the business logics,
            often some of the domain entity arguments might be calculated in the business logic code,
            and then passed to the entity constructor.
            </para>
            </summary>
            <param name="propertyDetails"></param>
        </member>
        <member name="M:Bruno57.Domain.Factory.Abstractions.ICacheProvider.Insert(System.Object,System.Object)">
            <summary>
            Sets a new Cache Entry for the given key and the value passed in
            </summary>
            <param name="key">Cache Key for the new Cache Entry</param>
            <param name="value">Cache Value for the new Cache Entry</param>
            <returns>Cache Value of the new entry</returns>
        </member>
        <member name="M:Bruno57.Domain.Factory.Abstractions.ICacheProvider.Insert(System.Object,System.Object,System.TimeSpan)">
            <summary>
            Sets a new Cache Entry for the given key and the value passed in.
            This method accepts an additional TimeSpan parameter to set how long the cache entry should be living for
            </summary>
            <param name="key">Cache Key for the new Cache Entry</param>
            <param name="value">Cache Value for the new Cache Entry</param>
            <param name="timeTillExpires">How long the cache should live for</param>
            <returns>Cache Value of the new entry</returns>
        </member>
        <member name="M:Bruno57.Domain.Factory.Abstractions.ICacheProvider.Insert(System.Object,System.Object,System.DateTime)">
            <summary>
            Sets a new Cache Entry for the given key and the value passed in.
            This method accepts an additional Datetime parameter to set an absolute expiration
            </summary>
            <param name="key">Cache Key for the new Cache Entry</param>
            <param name="value">Cache Value for the new Cache Entry</param>
            <param name="absoluteExpiration">When the cache entry should be expired</param>
            <returns>Cache Value of the new entry</returns>
        </member>
        <member name="M:Bruno57.Domain.Factory.Abstractions.ICacheProvider.Remove(System.Object)">
            <summary>
            Removes the cache entry from the memory cache for the given key.
            It tries to find if there is an entry for the given key. If found, Remove will be called, otherwise, false will be returned.
            </summary>
            <param name="key">Cache Key for the Cache Entry to be removed</param>
            <returns>Success flag of the Remove call. True, when Remove was successful, false if it was unsuccessful and when Key was not found.</returns>
        </member>
        <member name="T:Bruno57.Domain.Factory.Abstractions.IDomainFactory`2">
            <summary>
            Domain Factory interface. This is implemented in the Infrastructure layer.
            </summary>
            <remarks>
            Inject this interface in the client code to access its member.
            </remarks>
            <typeparam name="TRequest">A mediatr (in this solution) command as IRequest/ICommand, although it does not have to be.</typeparam>
            <typeparam name="TResponse">An aggregate root object.</typeparam>
        </member>
        <member name="M:Bruno57.Domain.Factory.Abstractions.IDomainFactory`2.CreateEntityObject(`0,System.Action{Bruno57.Domain.Factory.Abstractions.ActionOptions.DomainFactoryOption})">
            <summary>
            Create domain entity object
            </summary>
            <param name="request">The request that is used to create an entity object with</param>
            <param name="action">Optional action to enforce further behaviour or options</param>
            <returns>An instance of <typeparamref name="TResponse"/></returns>
        </member>
        <member name="M:Bruno57.Domain.Factory.Abstractions.IReadCache.Get(System.Object)">
            <summary>
            Retrieves cache value from memory for the given key
            </summary>
            <param name="key">Cache Key</param>
            <returns>Cache Value stored in cache for the given key</returns>
        </member>
    </members>
</doc>
