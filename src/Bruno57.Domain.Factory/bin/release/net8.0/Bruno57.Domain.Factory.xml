<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bruno57.Domain.Factory</name>
    </assembly>
    <members>
        <member name="T:Bruno57.Domain.Factory.Attributes.FactoryMethodAttribute">
            <summary>
            To mark a factory method.
            </summary>
            <remarks>
            This is used by the base factory to look up the factory method with some validation
            </remarks>
        </member>
        <member name="P:Bruno57.Domain.Factory.Attributes.FactoryMethodAttribute.FactoryMethodFor">
            <summary>
            String parameter that is used to mark the factory method with its parent class name
            </summary>
        </member>
        <member name="M:Bruno57.Domain.Factory.Attributes.FactoryMethodAttribute.#ctor(System.String)">
            <summary>
            The custom attribute constructor
            </summary>
            <param name="factoryMethodFor">An optional parameter to indicate what aggregate root this attribute belongs to. 
            It can be used to look up the factory method in the aggregate root class</param>
        </member>
        <member name="M:Bruno57.Domain.Factory.CreateEntityObjectFactory`2.CreateEntityObject(`0,System.Action{Bruno57.Domain.Factory.Abstractions.ActionOptions.DomainFactoryOption})">
            <inheritdoc/>
        </member>
        <member name="M:Bruno57.Domain.Factory.CreateEntityObjectFactory`2.PopulateParameterValues(`0,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Populates an argument list for the constructor to be invoked.
            </summary>
            <param name="request">The request type from which the parameter types and values are retrieved from</param>
            <param name="ignoredProperties">List of the properties to be ignored from the iteration</param>
            <param name="additionalProperties">List of the properties to be added to the iteration</param>
            <returns>Object array of parameter values in the order they were defined in the request type</returns>
        </member>
        <member name="T:Bruno57.Domain.Factory.Extensions.GuardClauseExtension">
            <summary>
            Guard clause extension.
            </summary>
        </member>
        <member name="M:Bruno57.Domain.Factory.Extensions.GuardClauseExtension.CheckForNull``1(``0,System.Func{System.Exception},System.String)">
            <summary>
            An extension method to guard against null for class objects.
            </summary>
            <typeparam name="T">The object the null check is done against.</typeparam>
            <param name="input">The generic object that is being checked for its state.</param>
            <param name="paramName"></param>
            <param name="customException">Optional. A function to create custom exception.</param>
            <returns><paramref name="input" /> if the value is not null.</returns>
            <example>
            <code>
            someObject.CheckForNull();
            someObject.CheckForNull(() => { throw new MyCustomException("custom exception message"); });
            </code>
            </example>
        </member>
        <member name="M:Bruno57.Domain.Factory.Extensions.GuardClauseExtension.IsNullOrAny``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check if the collection is null or empty
            </summary>
            <param name="inputCollection"></param>
            <typeparam name="T"></typeparam>
            <returns>A boolean result of the check</returns>
        </member>
    </members>
</doc>
